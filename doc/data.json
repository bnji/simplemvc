{
    "project": {},
    "files": {
        "demo/todo/todo.js": {
            "name": "demo/todo/todo.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "examples/debug.js": {
            "name": "examples/debug.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/jasmine/jasmine.js": {
            "name": "lib/jasmine/jasmine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "simple.mvc.js": {
            "name": "simple.mvc.js",
            "modules": {
                "MVC": 1
            },
            "classes": {
                "List": 1,
                "Controller": 1,
                "ModelView": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "MVC": {
            "name": "MVC",
            "submodules": {},
            "classes": {
                "List": 1,
                "Controller": 1,
                "ModelView": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "simple.mvc.js",
            "line": 144,
            "description": "Provides the core MVC classes: Controller & ModelView \n\n#1 Design Rule - Capitalization\n\nInternal methods (except the .toArray() method) have the first letter\ncapitalized. This is by design for two reasons:\n\n 1) JavaScript has many built in methods which already 'belong' to an object\n    so this is a good 'solution' which makes it possible to use methods such \n    as .Delete() (as .delete wouldn't be valid in JavaScript).\n\n2) To distinguish between the object's and JS built-in and 'custom' (passed\n  with the object data when a ModelView instance is created) methods. \n\n#2 Design Rule - Associative vs '.'-notation\n\nInternet Explorer (not all) don't like when an element/property in an \nobject literal or array is being accessed using dot notation. Even though\nit's generally encouraged (e.g. www.jshint.com) to use the dot notation, \nthis would very likely break when evaluated in IE! Therefore all \nelements/properties should be accessed associatively:\n obj = {foo : 'bar'}; \n obj['foo']; //(OK!)\n obj.foo; //(Breaks in IE (older versions)\n obj.someMethod(); //(OK! - also in IE!)",
            "itemtype": "main"
        }
    },
    "classes": {
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MVC",
            "namespace": "",
            "file": "simple.mvc.js",
            "line": 59,
            "description": "List\n\nA more human way of handling array's in JavaScript. it extends the array \n(currently) with two extra methods which makes it more easy and semantic\nwhen adding and removing elements using .Add() and .Remove() methods \nrespectively.",
            "params": [
                {
                    "name": "An",
                    "description": "array (is optional)",
                    "type": "Object"
                }
            ]
        },
        "Controller": {
            "name": "Controller",
            "shortname": "Controller",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MVC",
            "namespace": "",
            "file": "simple.mvc.js",
            "line": 128,
            "description": "Controller which handles the logic, such as saving, updating or deleting\nthe object.\n\nFor the time being the Controller class doesn't do much more than returning\nthe same data as entered (JSON) object literal. Still this is by design, as\nthere is a possibility for the 'controller' to do more than this 'stuff' \n(handling more than returning data) in the future.",
            "is_constructor": 1
        },
        "ModelView": {
            "name": "ModelView",
            "shortname": "ModelView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "MVC",
            "namespace": "",
            "file": "simple.mvc.js",
            "line": 144,
            "description": "ModelView creates a new object with data and settings. The data and \nsettings are (JSON) object literals and merged and returned after all the\ninternal setup is done.\nThe ModelView contains all the information about the object, which keeps\nthe View synchronized with the Model and vice versa.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "demo/todo/todo.js",
            "line": 288,
            "description": "An implementation using jStorage (localstorage) which saves/loads the notes.\nhttp://www.jstorage.info/",
            "class": "List"
        },
        {
            "file": "examples/debug.js",
            "line": 41,
            "description": "Only test for a name, dot(.) and 2-5 letters after the dot...",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 3,
            "description": "Top level namespace for Jasmine, a lightweight JavaScript BDD/spec/testing framework.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 10,
            "access": "private",
            "tagname": "",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 17,
            "description": "Use <code>jasmine.undefined</code> instead of <code>undefined</code>, since <code>undefined</code> is just\na plain old variable and may be redefined by somebody else.",
            "access": "private",
            "tagname": "",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 25,
            "description": "Show diagnostic messages in the console if set to true",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 31,
            "description": "Default interval in milliseconds for event loop yields (e.g. to allow network activity or to refresh the screen with the HTML-based runner). Small values here may result in slow test running. Zero means no updates until all tests have completed.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 37,
            "description": "Default timeout interval in milliseconds for waitsFor() blocks.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 50,
            "description": "Allows for bound functions to be compared.  Internal use only.",
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "base",
                    "description": "bound 'this' for the function",
                    "type": "Object"
                },
                {
                    "name": "name",
                    "description": "function to find",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 114,
            "description": "Getter for the Jasmine environment. Ensures one gets created",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 122,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 132,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 142,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 152,
            "ignore": "",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "typeName",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 163,
            "description": "Pretty printer for expecations.  Takes any object and turns it into a human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": "an object to be outputted",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 175,
            "description": "Returns true if the object is a DOM Node.",
            "params": [
                {
                    "name": "obj",
                    "description": "object to check",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 185,
            "description": "Returns a matchable 'generic' object of the class type.  For use in expecations of type when values don't matter.",
            "example": [
                "\n// don't care about which function is passed in, as long as it's a function\nexpect(mySpy).toHaveBeenCalledWith(jasmine.any(Function));"
            ],
            "params": [
                {
                    "name": "clazz",
                    "description": "",
                    "type": "Class"
                }
            ],
            "return": {
                "description": "matchable object of the type clazz"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 199,
            "description": "Returns a matchable subset of a JSON object. For use in expectations when you don't care about all of the\nattributes on the object.",
            "example": [
                "\n// don't care about any other attributes than foo.\nexpect(mySpy).toHaveBeenCalledWith(jasmine.objectContaining({foo: \"bar\"});"
            ],
            "params": [
                {
                    "name": "sample",
                    "description": "sample",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "matchable object for the sample"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 214,
            "description": "Jasmine Spies are test doubles that can act as stubs, spies, fakes or when used in an expecation, mocks.\n\nSpies should be created in test setup, before expectations.  They can then be checked, using the standard Jasmine\nexpectation syntax. Spies can be checked if they were called or not and what the calling params were.\n\nA Spy has the following fields: wasCalled, callCount, mostRecentCall, and argsForCall (see docs).\n\nSpies are torn down at the end of every spec.\n\nNote: Do <b>not</b> call new jasmine.Spy() directly - a spy must be created using spyOn, jasmine.createSpy or jasmine.createSpyObj.",
            "example": [
                "\n// a stub\nvar myStub = jasmine.createSpy('myStub');  // can be used anywhere\n\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// actual foo.not will not be called, execution stops\nspyOn(foo, 'not');\n\n// foo.not spied upon, execution will continue to implementation\nspyOn(foo, 'not').andCallThrough();\n\n// fake example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\n\n// foo.not(val) will return val\nspyOn(foo, 'not').andCallFake(function(value) {return value;});\n\n// mock example\nfoo.not(7 == 7);\nexpect(foo.not).toHaveBeenCalled();\nexpect(foo.not).toHaveBeenCalledWith(true);"
            ],
            "is_constructor": 1,
            "see": [
                "spyOn",
                "jasmine.createSpy",
                "jasmine.createSpyObj"
            ],
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 259,
            "description": "The name of the spy, if provided.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 263,
            "description": "Is this Object a spy?",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 267,
            "description": "The actual function this spy stubs.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 272,
            "description": "Tracking of the most recent call to the spy.",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy.mostRecentCall.args = [1, 2];"
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 281,
            "description": "Holds arguments for each call to the spy, indexed by call count",
            "example": [
                "\nvar mySpy = jasmine.createSpy('foo');\nmySpy(1, 2);\nmySpy(7, 8);\nmySpy.mostRecentCall.args = [7, 8];\nmySpy.argsForCall[0] = [1, 2];\nmySpy.argsForCall[1] = [7, 8];"
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 295,
            "description": "Tells a spy to call through to the actual implemenatation.",
            "example": [
                "\nvar foo = {\n  bar: function() { // do some stuff }\n}\n\n// defining a spy on an existing property: foo.bar\nspyOn(foo, 'bar').andCallThrough();"
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 311,
            "description": "For setting the return value of a spy.",
            "example": [
                "\n// defining a spy from scratch: foo() returns 'baz'\nvar foo = jasmine.createSpy('spy on foo').andReturn('baz');\n\n// defining a spy on an existing property: foo.bar() returns 'baz'\nspyOn(foo, 'bar').andReturn('baz');"
            ],
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 330,
            "description": "For throwing an exception when a spy is called.",
            "example": [
                "\n// defining a spy from scratch: foo() throws an exception w/ message 'ouch'\nvar foo = jasmine.createSpy('spy on foo').andThrow('baz');\n\n// defining a spy on an existing property: foo.bar() throws an exception w/ message 'ouch'\nspyOn(foo, 'bar').andThrow('baz');"
            ],
            "params": [
                {
                    "name": "exceptionMsg",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 349,
            "description": "Calls an alternate implementation when a spy is called.",
            "example": [
                "\nvar baz = function() {\n  // do some stuff, return something\n}\n// defining a spy from scratch: foo() calls the function baz\nvar foo = jasmine.createSpy('spy on foo').andCall(baz);\n\n// defining a spy on an existing property: foo.bar() calls an anonymnous function\nspyOn(foo, 'bar').andCall(function() { return 'baz';} );"
            ],
            "params": [
                {
                    "name": "fakeFunc",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 369,
            "description": "Resets all of a spy's the tracking variables so that it can be used again.",
            "example": [
                "\nspyOn(foo, 'bar');\n\nfoo.bar();\n\nexpect(foo.bar.callCount).toEqual(1);\n\nfoo.bar.reset();\n\nexpect(foo.bar.callCount).toEqual(0);"
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 415,
            "description": "Determines whether an object is a spy.",
            "params": [
                {
                    "name": "putativeSpy",
                    "description": "",
                    "type": "jasmine.Spy|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 425,
            "description": "Creates a more complicated spy: an Object that has every property a function that is a spy.  Used for stubbing something\nlarge in one call.",
            "params": [
                {
                    "name": "baseName",
                    "description": "name of spy class",
                    "type": "String"
                },
                {
                    "name": "methodNames",
                    "description": "array of names of methods to make spies",
                    "type": "Array"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 443,
            "description": "All parameters are pretty-printed and concatenated together, then written to the current spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 453,
            "description": "Function that installs a spy on an existing object's method name.  Used within a Spec to create a spy.",
            "example": [
                "\n// spy example\nvar foo = {\n  not: function(bool) { return !bool; }\n}\nspyOn(foo, 'not'); // actual foo.not will not be called, execution stops"
            ],
            "see": [
                "jasmine.createSpy"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": ""
                },
                {
                    "name": "methodName",
                    "description": ""
                }
            ],
            "return": {
                "description": "a Jasmine spy that can be chained with all spy methods"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 473,
            "description": "Creates a Jasmine spec that will be added to the current suite.\n\n// TODO: pending tests",
            "example": [
                "\nit('should be true', function() {\n  expect(true).toEqual(true);\n});"
            ],
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 491,
            "description": "Creates a <em>disabled</em> Jasmine spec.\n\nA convenience method that allows existing specs to be disabled temporarily during development.",
            "params": [
                {
                    "name": "desc",
                    "description": "description of this specification",
                    "type": "String"
                },
                {
                    "name": "func",
                    "description": "defines the preconditions and expectations of the spec",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 504,
            "description": "Starts a chain for a Jasmine expectation.\n\nIt is passed an Object that is the actual value and should chain to one of the many\njasmine.Matchers functions.",
            "params": [
                {
                    "name": "actual",
                    "description": "Actual value to test against and expected value",
                    "type": "Object"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 517,
            "description": "Defines part of a jasmine spec.  Used in cominbination with waits or waitsFor in asynchrnous specs.",
            "params": [
                {
                    "name": "func",
                    "description": "Function that defines part of a jasmine spec.",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 527,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 538,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 550,
            "description": "A function that is called before each spec in a suite.\n\nUsed for spec setup, including validating assumptions.",
            "params": [
                {
                    "name": "beforeEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 562,
            "description": "A function that is called after each spec in a suite.\n\nUsed for restoring any state that is hijacked during spec execution.",
            "params": [
                {
                    "name": "afterEachFunction",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 574,
            "description": "Defines a suite of specifications.\n\nStores the description and all defined specs in the Jasmine environment as one suite of specs. Variables declared\nare accessible by calls to beforeEach, it, and afterEach. Describe blocks can be nested, allowing for specialization\nof setup in some tests.",
            "example": [
                "\n// TODO: a simple suite\n\n// TODO: a simple suite with a nested describe block"
            ],
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 594,
            "description": "Disables a suite of specifications.  Used to disable some suites in a file, or files, temporarily during development.",
            "params": [
                {
                    "name": "description",
                    "description": "A string, usually the class under test.",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "function that defines several specs.",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 633,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 638,
            "description": "Declare that a child class inherit it's prototype from the parent class.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "childClass",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentClass",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 646,
            "access": "private",
            "tagname": "",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 700,
            "description": "Environment for Jasmine",
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 738,
            "return": {
                "description": "an object containing jasmine version build info, if set."
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 749,
            "return": {
                "description": "string containing jasmine version build info, if set."
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 766,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 773,
            "return": {
                "description": "a sequential integer starting at 0"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 780,
            "description": "Register a reporter to receive status updates from Jasmine.",
            "params": [
                {
                    "name": "reporter",
                    "description": "An object which will receive status updates.",
                    "type": "jasmine.Reporter"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 977,
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1008,
            "description": "Blocks are functions with executable code that make up a spec.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "func",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1030,
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1132,
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "actual",
                    "description": ""
                },
                {
                    "name": "spec",
                    "description": "",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1209,
            "description": "toBe: compares the actual to the expected using ===",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1217,
            "description": "toNotBe: compares the actual to the expected using !==",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toBe() instead.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1226,
            "description": "toEqual: compares the actual to the expected using common sense equality. Handles Objects, Arrays, etc.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1235,
            "description": "toNotEqual: compares the actual to the expected using the ! of jasmine.Matchers.toEqual",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toEqual() instead.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1244,
            "description": "Matcher that compares the actual to the expected using a regular expression.  Constructs a RegExp, so takes\na pattern or a String.",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1254,
            "description": "Matcher that compares the actual to the expected using the boolean inverse of jasmine.Matchers.toMatch",
            "params": [
                {
                    "name": "expected",
                    "description": ""
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toMatch() instead.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1263,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1270,
            "description": "Matcher that compares the actual to jasmine.undefined.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1277,
            "description": "Matcher that compares the actual to null.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1284,
            "description": "Matcher that boolean not-nots the actual.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1292,
            "description": "Matcher that boolean nots the actual.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1300,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1322,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1325,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was not called.",
            "deprecated": true,
            "deprecationMessage": "Use expect(xxx).not.toHaveBeenCalled() instead",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1349,
            "description": "Matcher that checks to see if the actual, a Jasmine spy, was called with a set of parameters.",
            "example": [
                "\n"
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1378,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1381,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1398,
            "description": "Matcher that checks that the expected item is an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1407,
            "description": "Matcher that checks that the expected item is NOT an element in the actual Array.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Object"
                }
            ],
            "deprecated": true,
            "deprecationMessage": "as of 1.0. Use not.toContain() instead.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1425,
            "description": "Matcher that checks that the expected item is equal to the actual item\nup to a given level of decimal precision (default 2).",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "precision",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1442,
            "description": "Matcher that checks that the expected exception was thrown by the actual.",
            "params": [
                {
                    "name": "expected",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1619,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1715,
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1750,
            "description": "Holds results for a set of Jasmine spec. Allows for the results array to hold another jasmine.NestedResults",
            "is_constructor": 1,
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1756,
            "description": "The total count of results",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1760,
            "description": "Number of passed results",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1764,
            "description": "Number of failed results",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1768,
            "description": "Was this suite/spec skipped?",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1772,
            "ignore": "",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1778,
            "description": "Roll up the result counts.",
            "params": [
                {
                    "name": "result",
                    "description": ""
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1789,
            "description": "Adds a log message.",
            "params": [
                {
                    "name": "values",
                    "description": "Array of message parts which will be concatenated later."
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1797,
            "description": "Getter for the results: message & results.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1804,
            "description": "Adds a result, tracking counts (total, passed, & failed)",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult|jasmine.NestedResults"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1824,
            "return": {
                "description": "True if <b>everything</b> below passed",
                "type": "Boolean"
            },
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1830,
            "description": "Base class for pretty printing for expectation results.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 1837,
            "description": "Formats a value in a nice, human-readable string.",
            "params": [
                {
                    "name": "value",
                    "description": ""
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2052,
            "description": "Runner",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2129,
            "description": "Internal representation of a Jasmine specification, or test.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "suite",
                    "description": "",
                    "type": "jasmine.Suite"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2168,
            "description": "All parameters are pretty-printed and concatenated together, then written to the spec's output.\n\nBe careful not to leave calls to <code>jasmine.log</code> in production code.",
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2191,
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "jasmine.ExpectationResult"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2204,
            "description": "Waits a fixed time period before moving to the next block.",
            "deprecated": true,
            "deprecationMessage": "Use waitsFor() instead",
            "params": [
                {
                    "name": "timeout",
                    "description": "milliseconds to wait",
                    "type": "Number"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2216,
            "description": "Waits for the latchFunction to return true before proceeding to the next block.",
            "params": [
                {
                    "name": "latchFunction",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "optional_timeoutMessage",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "optional_timeout",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2372,
            "description": "Internal representation of a Jasmine suite.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "env",
                    "description": "",
                    "type": "jasmine.Env"
                },
                {
                    "name": "description",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "specDefinitions",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "parentSuite",
                    "description": "",
                    "type": "jasmine.Suite"
                }
            ],
            "class": "List"
        },
        {
            "file": "lib/jasmine/jasmine.js",
            "line": 2469,
            "description": "A block which waits for some condition to become true, with timeout.",
            "is_constructor": 1,
            "extends": "jasmine.Block",
            "params": [
                {
                    "name": "env",
                    "description": "The Jasmine environment.",
                    "type": "jasmine.Env"
                },
                {
                    "name": "timeout",
                    "description": "The maximum time in milliseconds to wait for the condition to become true.",
                    "type": "Number"
                },
                {
                    "name": "latchFunction",
                    "description": "A function which returns true when the desired condition has been met.",
                    "type": "Function"
                },
                {
                    "name": "message",
                    "description": "The message to display if the desired condition hasn't been met within the given time period.",
                    "type": "String"
                },
                {
                    "name": "spec",
                    "description": "The Jasmine spec.",
                    "type": "jasmine.Spec"
                }
            ],
            "class": "List"
        },
        {
            "file": "simple.mvc.js",
            "line": 41,
            "description": "KeyCheck\n\nA human way to check which key was used.\nThis is supposed to simulate a static method known from other languages such\nas Java.",
            "itemtype": "method",
            "name": "KeyCheck",
            "params": [
                {
                    "name": "e",
                    "description": "Event",
                    "type": "Object"
                },
                {
                    "name": "n",
                    "description": "Name of the key to check against (e.g. 'enter', 'escape')",
                    "type": "String"
                }
            ],
            "class": "List",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 76,
            "description": "Add\n\nAdd a new element - It's more semantic to use .Add() instead of .push().",
            "itemtype": "method",
            "name": "Add",
            "params": [
                {
                    "name": "An",
                    "description": "element.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The array.",
                "type": "Array"
            },
            "class": "List",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 89,
            "description": "Remove\n\nRemove an element (if found) from the array.",
            "itemtype": "method",
            "name": "Remove",
            "params": [
                {
                    "name": "An",
                    "description": "element.",
                    "type": "Object"
                }
            ],
            "class": "List",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 107,
            "description": "Find\n\nFind elements in the array and return those elemens in a new array.",
            "itemtype": "method",
            "name": "Find",
            "params": [
                {
                    "name": "An",
                    "description": "element.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new Array containing the found elements.",
                "type": "Array"
            },
            "class": "List",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 216,
            "description": "Call the .Save() method whenever you want to save the object.\nNotice: This is intended behaviour, but the implementation of the\nmethod is up to the individual how and what is done when this method\nis called/executed.",
            "itemtype": "method",
            "name": "Save",
            "params": [
                {
                    "name": "par",
                    "description": "Provide extra parameters if needed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 230,
            "description": "Call the .Update() method whenever you want to update the object.\nNotice: This is intended behaviour, but the implementation of the\nmethod is up to the individual how and what is done when this method\nis called/executed.",
            "itemtype": "method",
            "name": "Update",
            "params": [
                {
                    "name": "par",
                    "description": "Provide extra parameters if needed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 244,
            "description": "Call the .Delete() method whenever you want to delete the object.\nNotice: This is intended behaviour, but the implementation of the\nmethod is up to the individual how and what is done when this method\nis called/executed.",
            "itemtype": "method",
            "name": "Delete",
            "params": [
                {
                    "name": "par",
                    "description": "Provide extra parameters if needed.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 259,
            "description": "Clear\n\nClears a property's value in the Model and the View.",
            "itemtype": "method",
            "name": "Clear",
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 273,
            "description": "Clear All\n\nClears all the data in the Model and the View.",
            "itemtype": "method",
            "name": "ClearAll",
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 286,
            "description": "AddGetSet\n\nAdd getter and setter methods for a property\n\nGetters and Setters in JavaScript/JScript (ECMAScript) are not an option\nas it is hard to make it work cross-browser/platform!\nThere is a solution here, but only down to IE9:\nSource: http://javascriptweblog.wordpress.com/2010/11/15/extending-objects-with-javascript-getters/\n\nIf changes in the model properties should be reflected in the view\nthen setter and getter methods will be attached using jQuery.\n\nNote: Will only be used(exec.) if 'reflectModelChangeInView' is TRUE.\n\nWorks in IE 7+: http://jsfiddle.net/cTJZN/",
            "itemtype": "method",
            "name": "AddGetSet",
            "params": [
                {
                    "name": "prop",
                    "description": "The object's property name",
                    "type": "String"
                },
                {
                    "name": "onUpdate",
                    "description": "callBack function will execute, whenever \nthe get/set event handlers bound with .bind() method are triggered.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 343,
            "description": "RemoveGetSet\n\nRemove getter and setter methods for a property",
            "itemtype": "method",
            "name": "RemoveGetSet",
            "params": [
                {
                    "name": "prop",
                    "description": "The object's property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 360,
            "description": "Trigger Event\n\nTrigger an event on an input element inside the view",
            "itemtype": "method",
            "name": "triggerEvent",
            "params": [
                {
                    "name": "prop",
                    "description": "Property name",
                    "type": "String"
                },
                {
                    "name": "evt",
                    "description": "Event type/name (e.g. 'keyup')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 378,
            "description": "AddProperty\n\nAdd a property to the Model",
            "itemtype": "method",
            "name": "AddProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "The property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 396,
            "description": "RemoveProperty\n\nRemove a property from the Model",
            "itemtype": "method",
            "name": "RemoveProperty",
            "params": [
                {
                    "name": "prop",
                    "description": "The property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 415,
            "description": "Set\n\nNotice: Must only be used if 'reflectModelChangeInView' is TRUE.\n\nWhen you need to update a value in the Model and reflect in the View.",
            "itemtype": "method",
            "name": "Set",
            "params": [
                {
                    "name": "prop",
                    "description": "The object's property name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The new value to set for the property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 437,
            "description": "Get\n\nNotice: Must only be used if 'reflectModelChangeInView' is TRUE.",
            "itemtype": "method",
            "name": "Get",
            "params": [
                {
                    "name": "prop",
                    "description": "The object's property name",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 458,
            "description": "GetViewData\n\nReturn the View data as an JSON object literal.",
            "itemtype": "method",
            "name": "GetViewData",
            "return": {
                "description": "The View data as JSON object",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 472,
            "description": "SetViewFromModel\n\nUpdates the elements in the View from the Model.",
            "itemtype": "method",
            "name": "SetViewFromModel",
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 487,
            "description": "SetModelFromView\n\nUpdate the model and databound elements.\n\nThis method is internally every time a 'change' and 'keyup' event occur \nin form elements. This is part of the concept to always update the Model, \nso it is synchronized with the View.\n\nIt is possible to override the call to this method for the 'keyup' event\nif it is implemented manually in the settings. Therefore it's important\nto know that if overriding this event, but still want 'live' updating \nof the Model to occur, then this method must be called from the custom\nimplementation of the 'keyup' event!",
            "itemtype": "method",
            "name": "SetModelFromView",
            "params": [
                {
                    "name": "updateDataboundValues",
                    "description": "TRUE | FALSE - If undefined or \ntrue, databound elements inside and/or outside the the View will also \nget updated. If false, then they won't.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 551,
            "description": "SetDataboundDomVal\n\nUpdate the databound elements inside or outside the View.",
            "itemtype": "method",
            "name": "SetDataboundDomVal",
            "params": [
                {
                    "name": "datasrc",
                    "description": "A viewId.",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "An element's name.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "A new value.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 574,
            "description": "RunEvent\n\nTrigger an event if specified in the settings.",
            "itemtype": "method",
            "name": "RunEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The eventName to trigger/execute.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 605,
            "description": "RunCtr\n\nExecute a method in the controller.",
            "itemtype": "method",
            "name": "RunCtr",
            "params": [
                {
                    "name": "method",
                    "description": "The methods name specified in the controller.",
                    "type": "String"
                },
                {
                    "name": "par",
                    "description": "If needed you can provide optional parameters.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The object (itself)",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 625,
            "description": "toArray\n\nConvert the object to a real Array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "The object converted into a real Array.",
                "type": "Array"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 637,
            "description": "GetViewId\n\nGet the ID of the View",
            "itemtype": "method",
            "name": "GetViewId",
            "return": {
                "description": "The View ID",
                "type": "String"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 649,
            "description": "FindElement\n\nFind and return one or many element/s within the View using a (id or class) selector.\n\nIf the elemenet is not found an empty array is returned.",
            "itemtype": "method",
            "name": "FindElement",
            "return": {
                "description": "An element from the View.",
                "type": "Array"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 663,
            "description": "AddEvents\n\nAdd events to the object's input fields",
            "itemtype": "method",
            "name": "AddEvents",
            "return": {
                "description": "The object",
                "type": "Object"
            },
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 694,
            "description": "keyup event\n\nIt's important to know that when overriding this event, \nbut still want 'live' updating of the Model to occur,\nthen this method must be called from the custom implementation \nof the 'keyup' event!",
            "itemtype": "event",
            "name": "keyup ...",
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 794,
            "description": "To keep the code which belongs to the object, but normally would be \nplaced after object instantiation, we isntead want to place it inside\nthe .init() method, which gets executed 1ms after the object has been\ncreated.\n\nWhy we use setTimeout: read below...\n\nIn some cases the user wants to call the object itself like this:\n\n\n//Create a new object\nobj = MVC.ModelView('#viewId', {\n  //Data:\n  foo : 'bar',\n  //Method\n  aCustomMethod : function() {\n   //does something\n  }\n  init : function() {\n    //All methods and other 'stuff' placed inside the .init() method\n    //gets executed immediately after the object has been created (setup).\n    //Therefore it's important (and necessary) to use setTimeout, as the\n    //object actually hasn't been created yet. So we set it to 1 ms! \n    obj.aCustomMethod();\n  }\n}\n});",
            "class": "ModelView",
            "module": "MVC"
        },
        {
            "file": "simple.mvc.js",
            "line": 835,
            "description": "Get or set HTML (DOM) values\n\nInspired by formParams: http://jquerypp.com/#formparams",
            "params": [
                {
                    "name": "jQuery",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "ModelView",
            "module": "MVC"
        }
    ]
}